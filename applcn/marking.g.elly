# add markup to convert English text into shallow XML
# marking.g.elly

#
# subprocedures
p:lxtd  # adding a tagged element from left side to a rightside markup
        # ('set' overrides any variable punc higher up in parse tree)
_
# trace
  set punc=
  split
  right
  back
# view 8
# show punc in_lxtd
  if ~punc=
#   view 15
    find </punc> <
#   view 15
    end 
  find > <
# view 12
  (typg)
  merge
__
p:rxtd  # adding tagged element from right side to leftside markup
_
  left
  split
  back
  find < >
  append <
  insert < typg
  append >
  right
  append </
  insert < typg
  append >
  merge
__

p:typg  # left generation of element tagged as specified type
_
  append <
  insert < typg
  append >
  left
  append </
  insert < typg
  append >
__
p:elma
_
  append <adj>
  obtain
  append </adj>
__
p:twob  # simple spaced output for 2-branch rule
_
  left
  space
  right
__

#
# syntax rules
g:SENT->SS
# ?>>?
   >>+0
_
  append <sent>
  linefeed
  left
  append </sent>
__
g:SS->SS PUNC[|stop]
 l[!corrl]>>-10
          >>*l
_
  left
  linefeed
  append <punc>
  right
  append </punc>
__
g:SS->PUNC[|start,-quo] SS
 >>*r--
_
  append <punc>
  left
  append </punc>
  right
__
g:SS[|segm]->SEGM
#           ?>>?
     l[!trng]>>-4
             >>*l
__
g:SS[|segm]->SS[|-segm] SEGM
#                 ?>>?
           r[!trng]>>-4
 l[!coord,rn]r[!rn]>>*l++
 l[!coord,rv]r[!rv]>>*l++
             r[!rv]>>*l[!rv]
             r[!rn]>>*l[!rn]
_
  left
  linefeed
  right
__
g:SS->SS PUNC[|-stop]
#               ?>>?
         l[!that]>>*l-4
 l[!corrl]r[!brk]>>-10
_
  left
  linefeed
  append <punc>
  right
  append </punc>
__
g:SS->SS CONJ
#                 ?>>?
           l[!that]>>*l-4
 l[!corrl]r[!coord]>>*l
 l[!corrl]r[!corrl]>>-16
          r[!coord]>>*l[!coord,cnj]
  l[!-cnj]r[!corrl]>>*l[!corrl,cnj]
  l[! cnj]r[!corrl]>>*l[!corrl]-1
            l[!cnj]>>-1
_
  left
  linefeed
  var typg=conj
  (brack)
__
g:SS->CONJ SS
 l[!corrl]>>*r[!corrl]
_
  append <conj>
  left
  var x=
  extract > x
  if ~x=,
    insert < x
    end
  append </conj>
  if  x=,
    linefeed
    append <punc>,</punc>
    end
  linefeed
  right
__

p:brack   # handle bracketing, if any
_
# trace
  var lbr=
  var rbr=
  split
  right
  back
# view 9
  if ~lbr=
    insert < lbr
    end
  if typg=
    merge
  else
    append <
    insert < typg
    append >
    merge
    append </
    insert < typg
    append >
#   view 9
    end
# show rbr brack
  if ~rbr=
    insert < rbr
    end
__
g:SEGM[|*unique]->ELEM
#            ?>>?
           n<2>>*l-
      l[!spcs]>>*l-6
      l[!lv,s]>>*l-
  l[!trng] n<3>>*l
              >>*l[!-trng]
__
g:SEGM[|*unique]->SEGM ELEM
#                        ?>>?
  l[!ppps,rv  ]r[!ppps,rn]>>*r-8
  l[!pro]      r[!ln]     >>*r-3
  l[!pro,-brk] r[!lv]     >>*r+2
  l[!rn]       r[!ln]     >>*r-2
  l[!rv]       r[!lv]     >>*r-4
                          >>*r
_
  left
  linefeed
  right
__
g:SEGM->SEGM PUNC[|-*l,-com,-stop]
 >>--
_
  left
  linefeed
  append <punc>
  right
  append </punc>
__
g:SEGM->SEGM CONJ
 l[!cnj]>>-8
        >>[!cnj]-4
_
  left
  linefeed
  append <conj>
  right
  append </conj>
__
g:SEGM->PEXP[|-stop]
 >>--
__

g:ELEM->ADV[~mod] NCLU
 r[$trlg]>>+
         >>[!rn]+
_
  var typg=adv
  (typg)
  right
__
g:ELEM->NCLU[:-dit,-dat, prep,-poss]
#      ?>>?
 l[&msr]>>[!ln,rn,ppps]
        >>[!rn,ppps]
__
g:ELEM->NCLU[:-dit,-dat,-prep,-poss]
#      ?>>?
 l[&1wy]>>[!rn]
 l[&adv]>>[!rn]
        >>[!ln,rn]
__
g:ELEM->NCLU[:dit]
# ?>>?
   >>[!rn]+
_
  append that
  linefeed
  left
__
g:ELEM->NCLU[:dat]
  >>[!ln]+
_
  left
  linefeed
  append that
__
g:ELEM->PRO[=nom]
# ?>>?
   >>*l[!rn,pro]
_
  var typg=pro
  (typg)
__
g:ELEM->PRO[=-nom]
# ?>>?
   >>*l[!rn,pro,brk]
_
  var typg=pro
  (typg)
__
g:ELEM[^*l]->VCLU[^-to,-s,-ed,ing]
#        ?>>?
   l[$pts]>>[!lv,rv,ppps]
  l[$trns]>>[!lv,rv,trng]
          >>[!lv,rv]
_
  var punc=
  left
__
g:ELEM[^*l]->VCLU[^-to,-s,-ed,-ing]
#       ?>>?
  l[$pts]>>[!lv,rv,ppps]
         >>[!lv,rv]
_
  var punc=
  left
__
g:ELEM[^*l]->VCLU[^-to,-s,ed]
#      ?>>?
 p<1 n<3>>[!lv,rv,spcs]
        >>[!lv,rv]
_
  var punc=
  left
__
g:ELEM[^*l]->VCLU[^-to,s]
 >>[!lv,rv,s]
_
  var punc=
  left
__
g:ELEM->VCLU[^to] NCLU
 >>[!lv,rn]+
_
  var punc=
  left
  linefeed
  var punc=
  right
__
g:ELEM->THAT VCLU[^s]
 >>[!rv]++
_
  append that
  linefeed
  var punc=
  right
__
g:ELEM->ELEM[^dit] THAT
 l[!lv]>>[!lv]++
       >>++
_
  left
  linefeed
  right
__
g:ELEM->THAT
 >>[!ln,rv,that]-
__
g:ELEM->DATE
_
  append <nclu>
  left
  append </nclu>
__
g:ELEM->TIME
_
  append <nclu>
  left
  append </nclu>
__
g:ELEM->ADJ
 l[$time]>>--------
      p<1>>--------
         >>----
_
  var typg=adj
  (typg)
__
g:ELEM[^]->ADJ CONJ[@*x]
_
  var typg=adj
  (typg)
  append <conj>
  right
  append </conj>
__
g:ELEM->ADV[~-int]
 n>2    >>-
 l[$deg]>>--
        >>---
_
  var typg=adv
  (typg)
__
g:ELEM[^dit]->PEXP[|eg,-stop]
 >>++
_
  var typg=conj
  (typg)
__
g:ELEM[^dit]->PEXP[|quo,-stop] PUNC[|*r,quo]
 >>------
_
  var typg=quote
  (typg)
  linefeed
  append <punc>
  right
  append </punc>
__
g:ELEM->PEXP[|stop] PUNC[|*r,quo]
 >>[!ln]++
_
  left
  linefeed
  append <punc>
  right
  append </punc>
__
g:ELEM->PREP[%-neg] PCLS[^ing]
 >>+
_
  var typg=prep
  (lxtd)
__
g:ELEM->PREP[%neg] PCLS[^ing]
 >>+++
_
  var typg=prep
  (lxtd)
__
g:ELEM[^dit]->PEXP[|eg,-com,-stop]
 >>*l
__
g:ELEM[^*r]->PUNC[|*l,quo] ELEM
 >>--
_
  var typg=punc
  (typg)
  right
__
g:ELEM->MISC
 p<1 l[!spcs]>>+3
_
  var typg=elem
  (decom)
__
g:ELEM->SPCL[|*r]
_
  var typg=conj
  (typg)
__

g:PUNC[|*l]->PUNC[|*l,quo] CONJ
 >>[$trlg]
_
  split
  linefeed
  append <conj>
  right
  append </conj>
  insert < add
  back
  delete <
  store add
  merge
  left
__

g:PEXP[|eg,com]->PUNC[|com] PEXP[|eg,-com]
 >>*r++
_
  (pbeg)
  linefeed
__

g:PEXP[|eg]->PEXP[|eg,com,-stop] PUNC[|com]
 >>++
_
  left
  append <punc>
  right
  append </punc>
__

p:pbeg
_
# trace
  var add=
  peek > x
  if ~x SP
    linefeed
    end
  append <punc>
  left
# view 24
  append </punc>
# show add pbeg
  insert < add
  linefeed
  right
# view 24
__
g:PEXP[|*l,nom,det]->PUNC[|*l] NCLU[:det]
 r[$trlg]>>[!ln]+
         >>[!ln,rn]+
_
  (pbeg)
__
g:PEXP[|*l,nom]->PUNC[|*l] NCLU[:-det]
 r[$trlg]>>[!ln]+
         >>[!ln,rn]+
_
  (pbeg)
__
g:PEXP[|*l,vrb]->PUNC[|*l] VCLU[^-ed,-ing]
 >>[!lv,rv]
_
  (pbeg)
  set punc=T
__
g:PEXP[|*l,vrb,ed]->PUNC[|*l] VCLU[^ed]
 >>[!lv,rv]++
_
# trace
  (pbeg)
  set punc=T
# show punc
__
g:PEXP[|*l,vrb,ing]->PUNC[|*l] VCLU[^ing]
 >>[!lv,rv]++
_
# trace
  (pbeg)
  set punc=T
__
g:PEXP[|*l]->PUNC[|*l] SEGM
 >>*r+
_
  (pbeg)
  set punc=T
__
g:PEXP[|det]->PUNC[|*l] DET
_
  (pbeg)
  set punc=T
__
g:PEXP[|*l]->PEXP[|-stop] NCLU
 >>*l[!-rv,rn]--
_
  var save=
  left
# show punc
  if ~punc=
    set save=T
    set punc=
    end
  linefeed
  right
  assign punc=save
__

p:pend
_
  left
  linefeed
  append <punc>
  right
  append </punc>
__
g:NCLU->PEXP[|nom,eg,-com,-stop]
 >>++
_
  var typg=nclu
  (typg)
__
g:NCLU[:det]->PEXP[|det,nom,-stop] PUNC[|*r]
 >>*l[&quo]+4
_
  (prom)
__
g:NCLU->PEXP[|-det,nom,-stop] PUNC[|*r]
 >>*r[&quo]+4
_
  (prom)
__
p:prom
_
  append <nclu>
  split
  left
  back
  find <nclu> <
  delete 6 >      # for new v1.3.5 find
  find </nclu> <
  delete 7 >      # for new v1.3.5 find
  merge
  linefeed
  var add=
  append <punc>
  right
  append </punc></nclu>
  insert < add
__

g:VCLU[^*r,infn]->TO VCLU[^-aux,-infn]
 >>++
_
  split
  right
  back
  append <vclu>
  left
  delete to >
  merge
__
g:VCLU[^*l]->VERB[^-*r] VCLU[^infn]
#       ?>>?
 r[$cmpd]>>*r--
         >>*r[$cmpd]++
_
  append <vclu><verb>
  left
  append </verb>
  split
  right
  back
  delete to >
  merge
__

g:VCLU->PEXP[|vrb,-ed,-ing,-stop] PUNC[|*r]
_
  var typg=vclu
  (pend)
__
g:VCLU[^ed]->PEXP[|vrb,ed,-stop] PUNC[|*r]
_
  var typg=vclu
  (pend)
__
g:VCLU[^ing]->PEXP[|vrb,ing,-stop] PUNC[|*r]
_
  var typg=vclu
  (pend)
__
g:SEGM->PEXP[|-nom,-vrb,-stop] PUNC[|*r]
 >>--
_
  (pend)
__
g:DET->PEXP[|det,-nom,-stop] PUNC[|*r]
_
  append <det>
  left
  append <punc>
  right
  append </punc></det>
__
g:PEXP[|*l]->PEXP[|-stop] PUNC[|emb]
_
  left
  linefeed
  append <punc>
  right
  append </punc>
__
g:VCLU->VCLU PREP
 >>*l-8
_
  left
  linefeed
  append <nclu><prep>
  right
  append </prep>
  space
  append *</nclu>
__

g:NCLU[:*l]->NOUN
 >>*l[&nml]
_
# trace
  append <nclu>
  var typg=noun
  (brack)
  append </nclu>
__

p:dtnc
_
  var typg=det
  (lxtd)
__
g:NCLU[:*r,det,dit]->DET[@dit] NCLU[:-det,-prep,-dit]
 >>*r
_
  (dtnc)
__
g:NCLU[:*l,dat]->NCLU[:-dat] THAT
 l[&stry]>>++
         >>-8
_
  left
__
g:NCLU[:*r,det]->DET[@sgl] NCLU[:-det,-prep,-plur]
 r[&cond]>>*r+
         >>*r
_
  (dtnc)
__
g:NCLU[:*r,det]->DET[@-sgl] NCLU[:-det,-prep]
 >>*r
_
  (dtnc)
__
p:pphr
_
  var typg=prep
  (lxtd)
__

g:NCLU[:*r,prep]->PREP[%-cnj] NCLU[:-prep,-det,num]
#      ?>>?
 r[&msr]>>*r
        >>*r[&-msr]+
_
# trace
  (pphr)
__
g:NCLU[:*r,prep]->PREP[%-cnj] NCLU[:-prep,det,num]
 >>*r[&-msr]+
_
  (pphr)
__
g:NCLU[:*r,prep]->PREP[%-cnj] NCLU[:-prep,-num]
 >>*r[&-msr]+
_
  (pphr)
__

g:NCLU->DATE NCLU[:-det,-num,-qnt,-prep]
_
  var typg=date
  (lxtd)
__
g:NCLU[:*l]->NCLU POSTP
 >>*l
_
  var typg=postp
  (rxtd)
__
g:NCLU[:*l]->NCLU ADJ
 r[$prd]>>*l+
        >>*l------
_
  var typg=adj
  (rxtd)
__
g:NOUN->NOUN NUM
 r[&cmpd]>>----
         >>++
_
  (twob)
__
g:NOUN[:*l]->NOUN PRO[=rflx]
 >>++
_
  left
  append <pro>
  right
  append </pro>
__
g:NCLU[:num]->NUM
 >>----
_
  append <nclu>
  var typg=num
  (typg)
  append </nclu>
__
g:NCLU[:det]->DEM[@ind]
 >>[&1wy]---
_
  append <nclu><dem>
  left
  append </dem></nclu>
__
g:NCLU[:*l]->NCLU[:num] POST
 >>++++
_
  left
  split
  back
  shift 7 >
  append <adv>
  right
  append </adv>
  merge
__

p:dmnc
_
  var typg=dem
  (lxtd)
__
g:NCLU[:*r,det,dit]->DEM[@dit] NCLU[:-det,-prep,-qnt,-dit]
  >>*r+
_
  (dmnc)
__
g:NCLU[:*r,det]->DEM[@-sgl,-plur,-dit] NCLU[:-det,-prep,-qnt,-dit]
#                 ?>>?
 l[!-*c,spcs]r[&*c]>>*r----
                   >>*r+
_
  (dmnc)
__
g:NCLU[:*r,det,sgl]->DEM[@sgl,-dit] NCLU[:-det,-prep,-plur,-qnt,-dit]
#                 ?>>?
 l[!-*c,spcs]r[&*c]>>*r----
                   >>*r++
_
  (dmnc)
__
g:NCLU[:*r,det,plur]->DEM[@plur,-dit] NCLU[:-det,-prep,-qnt,plur,-dit]
# ?>>?
  >>*r++++
_
  (dmnc)
__

g:NCLU[:*r]->ADJ[%-ed,-ing,-cnj] NCLU[:-det,-prep,-num,-qnt]
#             ?>>?
 l[$ind]r[&quo]>>*r[&cmpd]----
        r[&quo]>>*r[&cmpd]
               >>*r[&cmpd]+++
_
  var typg=adj
  (lxtd)
__
g:NCLU[:*r]->ADJ[%ed,-cnj] NCLU[:-det,-prep,-num,-qnt]
#             ?>>?
       r[&cmpd]>>*r----
 l[$ind]r[&quo]>>*r[&cmpd]----
        r[&quo]>>*r[&cmpd]
               >>*r[&cmpd]+++
_
  var typg=adj
  (lxtd)
__
g:NCLU[:*r]->ADJ[%ing,-cnj] NCLU[:-det,-prep,-num,-qnt]
 r[&prop]>>----
 l[$ind]r[&quo]>>*r[&cmpd]----
        r[&quo]>>*r[&cmpd]
               >>*r[&cmpd]+++
_
  var typg=adj
  (lxtd)
__
g:NCLU[:*r,num]->NUM NCLU[:-det,-prep,-num,-qnt]
 l[$cmpd]>>*r[&adv]++++
         >>*r++++
_
  var typg=num
  (lxtd)
__
g:NCLU[:qnt,num]->QUAN[@ind]
 l[!corrl]>>[&1wy]----
          >>[&1wy]--
_
  append <nclu><quan>
  left
  append </quan></nclu>
__
g:NCLU[:*r,det,qnt]->QUAN[@ind] NCLU[:-prep,-ing,-plur]
#                ?>>?
          l[!mltp]>>*r--------
 l[!corrl]r[&-nml]>>*r------
                  >>*r++
_
  var typg=quan
  (lxtd)
__
g:NCLU[:*r,det,qnt]->QUAN[@ind] NCLU[:-prep,-ing,plur]
#                ?>>?
 l[!corrl]r[&-nml]>>*r------
                  >>*r++
_
  var typg=quan                                               
  (lxtd)
__

g:NCLU[:*r,det,qnt]->QUAN[@-ind] NCLU[:-prep]                       
#                ?>>?
 l[!corrl]r[&-nml]>>*r------
                  >>*r++
_
  var typg=quan                                               
  (lxtd)
__
p:poss
_
# trace
  split
  left
# view 9
  right
  back
# view 9
  merge :</nclu><nclu>::
__
g:NCLU[:*r]->NCLU[:poss,-det,-prep] NCLU[:-poss]
#       ?>>?
 r[$trlg]>>*l[$trlg]++
         >>*l++
_
# trace
  (poss)
__
g:NCLU[:*r,det]->NCLU[:poss,det,-prep] NCLU[:-poss]
#       ?>>?
 r[$trlg]>>*l[$trlg]++
         >>*l++
_
# trace
  (poss)
__
g:NCLU[:det]->DET NUM  # ####
 >>--
_
  append <nclu>
  var typg=det
  (typg)

  split
  right
  back
  delete 2 <
  var tem
  store tem
  if tem=1
    append <pro>one</pro>
    merge
  else
    append <num>
    insert < tem
    merge
    append </num>
    end
  append </nclu>
__
g:NCLU[:*l,poss]->NCLU APOS
 >>*l-
_
  left
  split
  back
# trace
  find < >
  append <poss>
  right
  append </poss>
  merge
__
g:NCLU[:det]->DET ADJ
#      ?>>?
 r[$ind]>>-
        >>----
_
  append <nclu><det>
  left
  append </det><adj>
  right
  append </adj></nclu>
__
g:NCLU->PRO[=one]  # ####
 >>--
_
  append <nclu>
  var typg=pro
  (typg)
  append </nclu>
__

g:NOUN->UNKN
__
g:NOUN->NAVB
 >>-
__
g:NOUN->VERB SUFX[#vTOn]
_
  (twob)
__
g:NOUN->ADJ SUFX[#aTOn]
_
  (twob)
__
g:NOUN->NOUN SUFX[#nTOn]
 >>*l
_
  (twob)
__
g:NOUN[:ing]->VERB XING
# ?>>?
   >>-
_
  (twob)
__
g:NOUN[:*l]->NOUN[:ing] NAVB
 >>++
_
  left
  append <adv>
  right
  append </adv>
__
g:NOUN[:*r]->TITL NOUN
  >>+
_
  (twob)
__
g:NOUN[:hyph]->NOUN[:-hyph] PUNC[|hyph]
__
g:NOUN[:*r]->YEAR NOUN[:*u]
 >>++++
_
  (twob)
__
g:NOUN[:*r]->NOUN[:hyph] NOUN
# ?>>?
   >>++
__
g:NOUN[:*r,cnj]->NOUN[:-*l,-hyph,-poss,-plur,-ing] NOUN[:-cnj,ing,-*x]
#       ?>>?
 r[&prop]>>-2
 l[&spcs]>>-2
_
  (twob)
__
g:NOUN[:*r,cnj]->NOUN[:-*l,-hyph,-poss,-plur,-ing] NOUN[:-cnj,-ing,-*x]
#            ?>>?
      r[&prop]>>-2
      l[&spcs]>>-2
 l[&-*c]r[&*c]>>+2
              >>+1
_
  (twob)
__

g:NOUN[:*r,cnj]->NOUN[:-hyph,-poss,plur,-ing] NOUN[:-cnj,-ing,-plur,-*x]
#           ?>>?
     r[&prop]>>-2
 l[&*c]r[&*c]>>+2
       l[&*c]>>+0
             >>-4
_
  (twob)
__
g:NOUN[:*r,cnj]->NOUN[:-hyph,-poss,plur,-ing] NOUN[:-cnj,-ing,plur,-*x]
#             ?>>?	
       r[&prop]>>-2
 l[&-*c]r[&-*c]>>-4
  l[&*c]r[&-*c]>>+1
               >>-4
_
  (twob)
__

g:NOUN->NOUN[:*x] XID
 l[&*c]>>+3
       >>-3
_
  (twob)
__
g:NOUN->NOUN[:-*x,-plur,-ing] XID
 l[&*c]r[!*c]>>+2
      l[&-*c]>>-3
      r[!-*c]>>-3
_
  (twob)
__
g:NOUN->ABBR NOUN
_
  (twob)
__
g:PRO[=*r,-one]->PREP[%-cnj] PRO[=-nom]
# ?>>?
   >>[!ppps]
_
  var typg=prep
  (typg)
  right
__

p:vrbl
_
  append <vclu>
  var typg=verb
  (typg)
  append </vclu>
__
g:VCLU[^*l]->VERB
# ?>>?
   >>*l
_
  (vrbl)
__

g:VCLU[^*r]->ADV[~-cplx] VCLU[^-ed]
 l[$deg]>>*r------
_
  var typg=adv
  (lxtd)
__
g:VCLU[^*r]->ADV[~-cplx] VCLU[^ed]
 l[$deg,cmpd]>>*r+
_
  view
  var typg=adv
  (lxtd)
__
g:VCLU[^*l]->VCLU ADV[~-mod]
  r[$deg]  >>*l+0
  r[$prd]  >>*l++++
  l[$-trns]r[$trlg]>>*l+
  >>----
_
  var typg=adv
  (rxtd)
__
g:VCLU[^*l]->VCLU NAVB
  >>*l++++
_
  var typg=adv
  (rxtd)
__
g:VCLU[^hav,*r]->HAVE VCLU[^-hav]
 r[$cond]>>*r++
_
  var typg=aux
  (lxtd)
__
g:VCLU[^aux,*r]->AUXL[^-*r] VCLU[^-aux]
 l[$quo] >>*r-4
 r[$cond]>>*r+1
_
  var typg=aux
  (lxtd)
__
g:VCLU[^*r]->BE VCLU[^ing,-hav]
 >>*r++
_
  var typg=aux
  (lxtd)
__
g:VCLU[^*r]->BE VCLU[^ed,-hav]
 >>*r+
_
  var typg=aux
  (lxtd)
__
g:VCLU->AUXL PUNC
_
  append <vclu>
  var typg=aux
  (typg)
  append </vclu><punc>
  right
  append </punc>
__

g:PCLS->PREP[%cls] PCLS[^ing]
 >>+1
_
  var typg=prep
  (typg)
  right
__
g:PCLS[^*l]->VERB[^ing] NCLU
 l[$trns]>>+2
_
  append <vclu><verb>
  left
  append </verb></vclu>
  linefeed
  right
__
g:PCLS[^*l]->VERB[^ing] PRO
_
  append <vclu><verb>
  left
  append </verb></vclu>
  linefeed
  append <pro>
  right
  append </pro>
__

g:ADJX[%*r,lquo]->punc[|*l,quo] ADJ
 >>--
__
g:ADJ[%*l,-lquo]->ADJX[%lquo] PUNC[|*r,quo]
 >>++++
__

g:VERB->UNKN
 >>--
__
g:VERB[^beaj,to]->ADJ[%to] TO
 l[$spat]>>++
_
  if be=
    append [be]
    end
  space
  (twob)
__
g:VERB[^beaj,to]->BE VERB[^beaj,to]
 >>++++
_
  var be=T
  append be
  right
__
g:VERB[^*r,proc]->VERB[^proc] VERB[^ing]
 >>++
_
  (twob)
__
g:VERB[^proc]->VERB[^proc] ADJ
 >>+++
_
  left
  append <adj>
  right
  append </adj>
__
g:VERB->NOUN SUFX[#nTOv]
_
  (twob)
__
g:VERB->ADJ SUFX[#aTOv]
_
  (twob)
__
g:VERB[^*r]->NOUN[:hyph] VERB
__
g:VERB[^beaj]->BE ADJ[%-ed,-ing]
 r[$cmpd]>>++++
         >>+
_
  (twob)
__
g:VERB->VERB[^chng] ADJ
 >>*l++
_
  (twob)
__
g:VERB[^*l,to]->VERB[^beaj] TO
 >>+
_
  (twob)
__
g:VERB[^*l]->BE
 >>-
__
g:VERB[^hav]->HAVE
 >>-
__
g:VERB->AUXL[^*l] ADV
 n<3 >>++
     >>----
_
  (twob)
__

g:BE->BE XED
 >>+
_
  (twob)
__
g:BE->BE XING
 >>+
_
  (twob)
__
g:BE->BE ADV[~timg]
 >>++
_
  (twob)
__
g:HAVE->HAVE XED
 >>+
_
  (twob)
__
g:HAVE->HAVE XING
 >>+
_
  (twob)
__

g:ADJ->NOUN SUFX[#nTOa]
_
  (twob)
__
g:ADJ[%*r]->NOUN[:hyph] ADJ
__
g:ADJ[%*r,more]->ADV ADJ[%er]
 l[$deg]>>+8
_
  var typg=adv
  (typg)
  right
__
g:ADJ[%*r,more]->ADV[~-int] ADJ[%-er]
 l[$deg]>>[$cmpd]+6
_
  var typg=adv
  (typg)
  right
__
g:ADJ[%*r,more]->ADV[~int] ADJ[%-er]
 >>+4
_
  var typg=adv
  (typg)
  right
__
g:ADJ->ADJ[%more] THAT
 >>++
_
  (twob)
__
g:ADJ[%*r]->NOUN[:hyph] ADJ
 >>++
__
g:ADJ[%ed]->VERB[^ed,-dit,-*x]
 l[$noaj]>>-------
      n<2>>------
      p<1>>-
         >>[$ind]--
__
g:ADJ[%ing]->VERB[^ing,-proc,-ed]
      n<2>>------
 l[$trns]>>-----
      n>2>>-----
         >>--
__
g:ADJ->VERB SUFX[#vTOa]
_
  (twob)
__

g:ADV->ADJ SUFX[#aTOr]
 >>[$prd]
_
  (twob)
__
g:ADV->VERB SUFX[#vTOr]
_
  (twob)
__
g:ADV->ADV[~-int] ADV
 >>+
_
  (twob)
__
g:ADV->NEGN ADV[~-non]
 >>+
_
  (twob)
__
g:ADV->CONJ[@prep] DATE
 >>++++
_
  append <prep>
  left
  append </prep><date>
  right
  append </date>
__

g:ADJ->NEGN ADJ
 >>-
_
  (twob)
__
g:ADJ[%cnj]->CONJ[@cnj] ADJ[%-*x]
 n>3>>*r----
 n>2>>*r--
    >>*r-
_
  (twob)
__
g:ADJ[%*r,-cnj]->ADJ[%-*x] ADJ[%cnj]
 >>*r++++
_
  (twob)
__

g:PREP->ADJ TO
 l[$spat]>>++
         >>----
_
  (twob)
__
g:PREP[%cnj]->PREP[%-cnj] CONJ[@-rel]
 >>+
_
  left
  append <conj>
  right
  append </conj>
__
g:PREP->PREP[%cnj] PREP
 >>++++
__
g:PREP->ADV[~dir] PREP[%of]
 >>++
_
  var typg=adv
  (typg)
  right
__

g:NUM-> MONEY NUM
__
g:NUM->ADJ[%mod] NUM
 >>+++
_
  var typg=adj
  (typg)
  right
__
g:NUM->ADV[~mod] NUM
 l[$deg]>>[$cmpd]++++
        >>[$cmpd]+
_
  var typg=adv
  (typg)
  right
__
g:NUM[:*r]->ADV[~ord] NUM[:-*r]
 >>++
_
  (twob)
__
g:NUM[:*l]->NUM[:-*l] POST
_
  left
  append <adv>
  right
  append </adv>
__

#
# simple inflections
g:NOUN[:*l,plur]->NOUN[:-*l,-*r] XS
#       ?>>?
 l[&sglo]>>*l--
         >>*l
_
  (twob)
__
g:NOUN[:plur]->UNKN XS
_
  (twob)
__
g:VERB->UNKN XS
_
  (twob)
__
g:VERB[^ed]->UNKN XED
_
  (twob)
__
g:VERB[^ing]->UNKN XING
_
  (twob)
__
g:VERB[^*l,s]->VERB[^-*l,-*r] XS
_
  (twob)
__
g:VERB[^*l,ed]->VERB[^-*l,-*r] XED
 >>*l++++
_
  (twob)
__
g:VERB[^*l,ing]->VERB[^-*l,-*r] XING
# ?>>?
   >>*l
_
  (twob)
__
g:VERB[^*l,-ptcl]->VERB[^ptcl] PTCL   # inherited feature may be turned off in v1.3
 >>*l[$pts]+++
_
  (twob)
__
g:VERB[^*l,-ptcl]->VERB[^ptcl] TO     #
 >>*l--
_
  (twob)
__
g:VERB[^*l]->VERB PREP[%mod]
 >>*l[$trns]++
_
  (twob)
__

g:ADJ[%*l,er]->ADJ[%-*l,-*r] XER
 >>*l
_
  (twob)
__
g:ADJ[%*l]->ADJ[%-*l,-*r] XEST
 >>*l
_
  (twob)
__
g:ADJ[%*r]->ADV[~int] ADJ
 >>*r++
_
  append <adv>
  left
  append </adv>
  right
__
g:ADJ[%*l]->ADJ[%er] CMPC
 >>*l++
_
  (twob)
__

g:ADV->ADV[~int] ADV
 >>++++
_
  (twob)
__
g:ADV[~er]->ADV XER
 >>----
_
  (twob)
__
g:ADV[~*l]->ADV[~er] CMPC
_
  (twob)
__
g:ADV[~*r]->NCLU[:-prep,-det,num] ADV[~trlg]
 l[&msr]>>++++
        >>----
__
g:ADV[~*r]->NCLU[:-prep,-det,-num,plur] ADV[~trlg]
 l[&msr]>>++++
        >>----
__

g:DEM[@*r]->PREP[%-cnj] DEM[@ind]
 >>-
_
  var typg=prep
  (lxtd)
__
p:datime
_
  var typg=prep
  (typg)
  append <
  insert < datime
  append >
  right
  append </
  insert < datime
  append >
__
g:DATE->PREP[%-cnj] YEAR
_
  var datime=date
  (datime)
__
g:DATE[:*r]->PREP[%-cnj] DATE
_
  var datime=date
  (datime)
__
g:DATE->DATE ADV[~date]
 >>++
_
  split
  back
  left
  shift 7 >
  space
  right
  merge
__
g:TIME[:*r]->PREP[%-cnj] TIME
_
  var datime=time
  (datime)
__

g:CONJ->ADV[~mod] CONJ
 >>+
_
  append <mod>
  left
  append </mod>
  right
__
g:CONJ->NEGN CONJ
_
  (twob)
__
g:CONJ->CONJ[@-*l,-rel] PUNC[|com]
 >>+
__

g:QUAN->ADV[~prox] QUAN
_
  (twob)
__
g:QUAN->QUAN QUAN
 >>+++
_
  (twob)
__

#
# predicate negation
g:AUXL[^neg,*l]->AUXL[^-neg] NEGN
 >>*l
_
  (twob)
__
g:BE[^neg,*l]->BE[^-neg] NEGN
_
  (twob)
__
g:HAVE[^neg,*l]->HAVE[^-neg] NEGN
_
  (twob)
__
g:AUXL[^hav]->HAVE[^-neg] TO
 >>++++
_
  (twob)
__
g:NEGN->ADV NEGN
 >>+
_
  (twob)
__

#
# compound auxiliaries
p:aux
_
  left
  append <quan>
  right
  append </quan>
__
g:AUXL[^*r]->AUXL AUXL
 >>++
_
  (twob)
__
g:AUXL->AUXL QUAN[@cnj]
 >>++
_
  (aux)
__
g:HAVE->HAVE QUAN[@cnj]
 >>++
_
  (aux)
__

#
# special contextual check
g:DEM[@*r,dit]->THAT DEM
_
  right
__
g:DET[@*r,dit]->THAT DET
_
  right
__

g:QUAN->THERE BE
_
  (twob)
__

#
# internal dictionary
d:in   <- PREP
__
d:of   <- PREP[%of]
__
d:on   <- PREP
__
d:by   <- PREP[%cls]
__
d:at   <- PREP
__
d:into <- PREP
__
d:to   <- PREP[%to]
__
d:for  <- PREP[%cls]
__
d:with <- PREP
__
d:from <- PREP
__
d:within <- PREP
 >>++
__
d:over <- PREP
__
d:through <- PREP
__
d:outside <- PREP
__
d:against <- PREP
__
d:across  <- PREP
__
d:under   <- PREP
 >>+
__
d:about   <- PREP[%*l]
__
d:above   <- PREP[%*l]
__
d:like    <- PREP[%mod]
 >>+
__
d:except  <- PREP
__
d:round   <- PREP
__
d:around  <- PREP
 >>+
__
d:atop    <- PREP
__
d:along   <- PREP
__
d:alongside <- PREP
__
d:between <- PREP
__
d:inside  <- PREP
__
d:per     <- PREP
__
d:among   <- PREP
__
d:upon    <- PREP
__
d:during  <- PREP
__
d:without <- PREP[%neg]
__
d:toward  <- PREP
__
d:unto <- PREP
__
d:via  <- PREP
__

d:to   <- TO
__

d:ago  <- POSTP
__

d:a   <- DET[@sgl]
__
d:an  <- DET[@sgl]
__
d:the <- DET
__

d:this <- DEM[@ind,sgl]
__
d:that <- DEM[@ind,sgl]
 >>[!spcs]
__
d:that <- THAT
__
d:these<- DEM[@ind]
__
d:those<- DEM[@ind]
__
d:my   <- DEM
__
d:your <- DEM
__
d:his  <- DEM[@ind]
__
d:her  <- DEM
__
d:its  <- DEM
__
d:our  <- DEM
__
d:their<- DEM
__
d:them <- DEM[@plur]
 >>--
__
d:such <- DEM[@ind]
__
d:which <- DEM[@ind]
 >>-
__
d:what  <- DEM[@ind]
__
d:cjwhat <- CONJ[@ind]
_
  append what
__

d:who  <- CONJ[@rel,ind]
__
d:which<- CONJ[@rel,ind]
__
d:where<- CONJ[@rel,ind]
__
d:while<- CONJ
__
d:how  <- CONJ[@ind]
__
d:although <- CONJ
__
d:because  <- CONJ
__
d:until    <- CONJ
__
d:whatever <- CONJ[@rel]
__
d:whenever <- CONJ
__
d:whether  <- CONJ
__
d:unless   <- CONJ
__

d:all  <- QUAN[@ind,cnj]
__
d:any  <- QUAN[@ind]
__
d:some <- QUAN[@ind]
__
d:many <- QUAN[@ind]
 >>[!mltp]
__
d:each <- QUAN[@ind,cnj]
__
d:every<- QUAN
__
d:no   <- QUAN
__
d:several<-QUAN[@ind]
 >>[!mltp]
__
d:both   <- QUAN[@ind,cnj]
 >>[!corrl]
__
d:either <- QUAN[@ind,cnj]
 >>[!corrl]
__
d:multiple <- QUAN
__
d:another <- QUAN[@ind]
__

d:there <- THERE
 >>+
__
d:there <- ADV
__

d:i    <- PRO[=nom]
__
d:me   <- PRO
__
d:you  <- PRO
__
d:he   <- PRO[=nom]
__
d:she  <- PRO[=nom]
__
d:it   <- PRO
__
d:we   <- PRO[=nom]
__
d:us   <- PRO
 >>+
__
d:they <- PRO[=nom]
__
d:mine <- PRO
__
d:yours<- PRO
__
d:hers <- PRO
__
d:ours <- PRO
__
d:theirs<-PRO
__
d:him  <- PRO
__
d:them <- PRO
__
d:her  <- PRO
__
d:myself   <- PRO[=rflx]
__
d:yourself <- PRO[=rflx]
__
d:himself  <- PRO[=rflx]
__
d:herself  <- PRO[=rflx]
__
d:itself   <- PRO[=rflx]
__
d:ourselves  <- PRO[=rflx]
__
d:yourselves <- PRO[=rflx]
__
d:themselves <- PRO[=rflx]
__

d:1 <- PRO[=one]
_
  append one
__
d:2 <- NUM[:cnj]
_
  append two
__
d:someone <- PRO
__
d:anyone  <- PRO
__

d:and  <- CONJ[@cnj]
 >>[!coord]
__
d:or   <- CONJ[@cnj,qnt]
 >>[!coord]
__
d:but  <- CONJ
__
d:nor  <- CONJ[@cnj,qnt]
 >>[!coord]
__
d:plus <- CONJ
__
d:if   <- CONJ
__
d:so   <- CONJ
__
d:so   <- ADV[~int]
 >>++
__
d:when <- CONJ
__
d:since<- CONJ[@prep]
__
d:before<-CONJ[@prep]
__
d:after<- CONJ[@prep]
__
d:as   <- CONJ[@*x]
__
d:despite <- CONJ
__
d:than    <- CONJ
__
d:except  <- CONJ
__

d:is   <- BE
__
d:am   <- BE
__
d:are  <- BE
__
d:was  <- BE
__
d:were <- BE
__
d:be   <- BE
__
d:been <- BE[^ed]
__
d:have <- HAVE
__
d:has  <- HAVE
 >>+
__
d:had  <- HAVE
 >>+
__
d:will <- AUXL
__
d:shall<- AUXL
__
d:would<- AUXL
__
d:should<-AUXL
__
d:do   <- AUXL[^*l]
__
d:did  <- AUXL[^*l]
__
d:can  <- AUXL
__
d:may  <- AUXL
__
d:might<- AUXL
__
d:must <- AUXL
__
d:could<- AUXL
__
d:cannot<- AUXL
__

d:in  <- PTCL
__
d:out <- PTCL
 >>+
__
d:off <- PTCL
__
d:at  <- PTCL
__
d:up  <- PTCL
__
d:over <- PTCL
__

d:not  <- NEGN
__
d:never <- ADV
__
d:non  <- PREF
__

#
# inflectional endings and morphological suffixes
d:-s   <- XS
__
d:-ed  <- XED
__
d:-n   <- XED
__
d:-t   <- XED
__
d:-ing <- XING
__
d:-er  <- XER
__
d:-est <- XEST
__
d:-'s  <- APOS
__
d:-’s  <- APOS
__

d:-ion  <- SUFX[#vTOn]
__
d:-ize  <- SUFX[#aTOv]
__
d:-ize  <- SUFX[#nTOv]
__
d:-ic   <- SUFX[#nTOa]
__
d:-al   <- SUFX[#nTOa]
__
d:-ar   <- SUFX[#nTOa]
__
d:-ate  <- SUFX[#nTOa]
__
d:-ern  <- SUFX[#nTOa]
__
d:-ment <- SUFX[#vTOn]
__
d:-ation<- SUFX[#vTOn]
__
d:-ly   <- SUFX[#aTOr]
__
d:-ly   <- SUFX[#nTOa]
__
d:-ful  <- SUFX[#nTOa]
__
d:-ous  <- SUFX[#nTOa]
__
d:-er   <- SUFX[#vTOn]
__
d:-or   <- SUFX[#vTOn]
__
d:-ingly<- SUFX[#vTOr]
__
d:-ist  <- SUFX[#aTOn]
__
d:-ist  <- SUFX[#nTOn]
__
d:-ive  <- SUFX[#vTOa]
__
d:-ory  <- SUFX[#vTOa]
__
d:-able <- SUFX[#vTOa]
__
d:-y <- SUFX[#nTOa]
__
d:-y <- SUFX[#aTOr]
__

d:$ <- MONEY
__
d:£ <- MONEY
__
d:€ <- MONEY
__
d:¥ <- MONEY
__

# # # # # # # #

p:opnpl
_
  left
  delete 1 >
  store lbr
  right
__
p:clspr
_
  left
  right
  delete 1 >
  store rbr
__
d:[ <- OPNP
__
d:] <- CLSP
__
g:NOUN[:*r]->OPNP NOUN
_
  (opnpl)
__
g:NOUN[:*l]->NOUN CLSP
 >>+
_
  (clspr)
__
g:VERB[^*r]->OPNP VERB
_
  (opnpl)
__
g:VERB[^*l]->VERB CLSP
 >>+
_
  (clspr)
__
g:DET[@*r]->OPNP DET
_
  (opnpl)
__
g:DET[@*l]->DET CLSP
 >>+
_
  (clspr)
__
g:CONJ[@*r]->OPNP CONJ
_
  (opnpl)
__
g:CONJ[@*l]->CONJ CLSP
 >>+
_
  (clspr)
__
g:CNJA->CONJ AUXL
 l[!coord]>>+0
          >>--
_
  (twob)
__
g:AUXL->AUXL CNJA
 >>++
_
  (twob)
__
g:AUXL[^*r]->PUNC[|*l,quo] AUXL
 >>[$quo]++
_
  var typg=punc
  (typg)
  linefeed
  right
__
g:AUXL->AUXL[^*r] PUNC[|*r,quo]
 l[$quo]>>+
        >>--
_
  left
  append <punc>
  right
  append </punc>
  linefeed
__
g:VCLU->BE PEXP[|emb,quo]
 >>++++
_
  split
  right
  back
  append <punc>
  shift 1 <
  append </punc><vclu>
  var typg=aux
  (typg)
  shift   <    # get all but the last char
  shift 1 >    # in the new buffer
  append </vclu><punc>
  merge
  append </punc>
__
g:PEXP[|emb,quo]->PUNC[|quo,*l] ADJ[%rquo]
__
g:ADJ[%*l,rquo]->ADJ[%-rquo,-*x] PUNC[|quo,-com,*r]
__
g:SSNT->SEPR SENT
_
# trace
  right
__
g:SENT->SENT SSNT
_
  left
  delete from <
  split
  right
  back
  delete to >
  merge
__

g:HAVE[^ed]->XD
_
  append 'd
__
g:AUXL->XD
 >>-
_
  append 'd
__
g:NOUN->CONJ[@qnt] NUM[:cnj]
 >>-
_
  (twob)
__
d:kind <- GENR
__
g:ADV->GENR PREP[%of]
 >>-2
__
g:ADV[~cplx]->ADV NCLU[:prep,-poss]
 >>-1
__
g:VERB[^*r,hav,ing]->HAVE[^ing] VERB[^ed]
 >>+4
_
  (twob)
__

# abbreviated titles

d:mr  <- TITL
__
d:mrs <- TITL
__
d:ms  <- TITL
__
d:dr  <- TITL
__

g:TITL[@dot]->TITL[@-dot] PUNC[|*x]
 >>++++
__

# uses semantic feature !ppps since no syntactic feature %prep is available

g:ADV->ADV PRO
 r[!ppps]>>+2
         >>-8
_
  left
  append <pro>
  right
  append </pro>
__

p:decom
_
  split
  left
  back
  var x
  peek x <
  if x=,
    delete 2 <
    append <punc>,</punc>
    end
  append <
  insert < typg
  append >
  merge
  append </
  insert < typg
  append >
__
g:ELEM->PCNJ
_
  var typg=conj
  (decom)
__
g:ELEM->ALLTHT VCLU
 >>++
_
  append <nclu><quan>all</quan></nclu>
  linefeed
  append that
  linefeed
  right
__
g:ELEM->ALLTHT
 >>-
_
  append <nclu><quan>all</quan>
  append <dem>that</dem></nclu>
__
g:ADJX[%cnj]->ADJ PUNC[|com]
 l[$cmpd]>>----
         >>*l
_
  (twob)
__
g:ADJX[%cnj]->ADJ CONJ[@cnj,-rel]
 l[$cmpd]>>----
         >>*l--
_
  (twob)
__
g:ADJ[%*r]->ADJX[%cnj] ADJ[%-ed,-ing]
 >>*l++++
_
  (twob)
__
g:HYPA->PUNC[|hyph] VERB[^ed]
__
g:ADJ->ADV HYPA
 n>4>>----
    >>++++
__

g:PUNC[|*l]->PUNC SPCL[|*r,-*x]
 >>++
__
g:NOUN->NOUN SPCL[|*r]
 >>+
_
  left
  space
  right
__

g:NCLU[:*r]->NEGN NCLU[:prep]
 >>-
_
  (twob)
__
g:NCLU[:*r]->NEGN NCLU[:-prep,det]
 >>-
_
  (twob)
__
g:VCLU[^*r]->NEGN VCLU[^infn]
_
  (twob)
__

g:NUM->PREP[%*l] NUM
 >>-
_
  (twob)
__

g:PREF[|hyph]->PREF[|-hyph] PUNC[|hyph]
 >>+++
__
g:ADJ->PREF NOUN
 >>++
__
g:ADJ->PREF ADJ
 >>++
__
g:ADJ->NOUN HYPA
 >>++++
__

#
# special rules for quoted chants
#

p:lone
_
  append <
  insert < ltyp
  append >
  left
  right
  append </
  insert < ltyp
  append >
__

g:SNGL[|vrb]->VERB PUNC[|stop]
 l[$*c] n<3>>[$vls]++++
           >>-8
_
  var ltyp=verb
  (lone)
__
g:SNGL[|nom]->NOUN PUNC[|stop]
 l[$*c] n<3>>[$nls]++++
           >>-8
_
  var ltyp=noun
  (lone)
__
g:SNGL->ADJ PUNC[|stop]
 l[$*c] n<3>>++++
           >>-8
_
  var ltyp=adj
  (lone)
__
p:chnt
_
  append <punc>
  left
  append </punc>
  linefeed
  right
__
g:PEXP[|stop]->PUNC[|*l,quo] SNGL[|nom]
 >>[$nls]
_
  (chnt)
__
g:PEXP[|stop]->PUNC[|*l,quo] SNGL[|vrb]
_
  (chnt)
__
g:PEXP[|stop]->PUNC[|*l,quo] SNGL[|-nom,-vrb]
_
  (chnt)
__
g:PEXP[|*l]->PEXP[|stop] SNGL[|nom]
 l[$nls]>>[$nls]--
        >>[$nls]
__
g:PEXP[|*l]->PEXP[|stop] SNGL[|vrb]
 l[$-nls]>>--
__
g:PEXP[|*l]->PEXP[|stop] SNGL[|-nom,-vrb]
 l[$nls]>>--
__

#
# conjoined correlative expressions
#

d:neither <- ECJS
__
d:nor     <- ECJN
__
d:both    <- ECJS
__
d:and     <- ECJN
__
d:either  <- ECJS
__
d:or      <- ECJN
__

p:dfcj
_
  append <conj>
  left
  append </conj>
__
p:dfnm
_
  append <nclu><quan>
  left
  append </quan></nclu>
__

# do NOT enforce exact correlation!

g:ECJS[=*l]->ECJS[=idn] ECJN[=idn]
 >>+11
_
  var typc=
  left
  linefeed
  right
__
g:ECJS[=idn,*r]->ECJS[=-idn] ITM
# ?>>?
   >>++
_
  if   typc=nom
    split
    right
    back
    shift 6 <
    append <quan>
    left
    append </quan>
    merge
  elif typc=vrb
    (dfnm)
    linefeed
    right
  else
    (dfcj)
    right
    end
__
g:ECJN[=idn,*r]->ECJN[=-idn] ITM
 >>+
_
  (dfcj)
  right
__
g:ITM[=nom]->NCLU
 >>+
__
g:ITM[=vrb,ing]->VCLU[^ing]
__
g:ITM[=vrb]->VCLU[^-ing]
__
g:ITM->ADJ
_
  append <adj>
  left
  append </adj>
__
g:ITM->ADV
_
  append <adv>
  left
  append </adv>
__

g:ELEM->ECJS[=idn,-*l,nom]
 >>+
_
  var typc=nom
  left
__
g:ELEM->ECJS[=idn,-*l,vrb,-ing]
 >>+
_
  var typc=vrb
  left
__
g:ELEM->ECJS[=idn,-*l,vrb,ing]
 >>+++
_
  var typc=vrb
  left
__
g:ELEM->ECJS[=idn,-*l,-nom,-vrb]
 >>+
_
  var typc=
  left
__
g:ELEM->ECJS[=-idn,-*l]
 >>-
_
  (dfnm)
__
g:ELEM->ECJS[=*l]
 >>+
__
